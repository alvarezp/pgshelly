#!/bin/bash

# Example:
#
# CREATE DATABASE mypets
# CREATE TABLE dogs (name VARCHAR PRIMARY KEY, breed VARCHAR);
# CREATE FUNCTION about(dogs) RETURNS text LANGUAGE SQL AS $$
#   SELECT $1.name || ' is a ' || $1.breed;
# $$
#
# mypets dogs new --name=Pluto --breed=bloodhound
# mypets dogs new --name=Spike --breed=bulldog
# mypets dogs show
# mypets dogs new --name=Pongo --breed=dalmatian
# mypets dogs show --name=Spike
# mypets dogs new --name='Santa'\''s Little Helper' --breed=greyhound
# mypets dogs show
# mypets dogs new --name=Ren --breed=Stimpy
# mypets dogs show
# mypets dogs set --breed=chihuahua on --name=Ren
# mypets dogs show
# mypets dogs del --name=Spike
# mypets dogs show
# mypets dogs about --name=Ren

DBNAME=$(basename $0)
DBTABLE=$1
COMMAND=$2

show_usage() {
    echo "Usage: $DBNAME <object> <operation> <criteria>"
    echo
    [ "$1" = "no_exit" ] || exit 2;
}

show_help() {
    show_usage no_exit
    echo "Available operations:"
    echo "  $DBNAME <object> new  --attr=val ..."
    echo "  $DBNAME <object> show --attr=val ..."
    echo "  $DBNAME <object> set  --attr=val ... on --attr=val ..."
    echo "  $DBNAME <object> del  --attr=val ..."
    echo
    echo "Object may have additional operations."
    echo "Please use $DBNAME --help-objects for more details."
    echo
    [ "$1" = "no_exit" ] || exit 2;
}

show_object_help() {
    show_help no_exit
    echo "Available objects:"
    psql -P t -A $DBNAME -c 'select table_name from information_schema.tables where table_schema NOT IN ($$pg_catalog$$, $$information_schema$$);' | sort | sed -re 's/^/ - /g'
    echo
    [ "$1" = "no_exit" ] || exit 2;
}

if [ $# -eq 0 ]; then
    show_usage
fi

if [ "$DBTABLE" = "--help" -o "$DBTABLE" = "-h" ]; then
    show_help
fi

if [ "$DBTABLE" = "--help-objects" ]; then
    show_object_help
fi

SET=0
[ "$COMMAND" = "set" ] && SET=1

shift
shift

while [ ! -z "$1" ]; do
    argcore=${1#--}
    if [ "$1" = "on" ]; then
        SET=0
        shift
        continue
    fi
    if [ "$1" = "$argcore" ]; then
        echo "$DBNAME: unrecognized keyword: $1"
        exit 2
    fi
    fieldname=${argcore%=*}
    value=${argcore#*=}
    if [ "$SET" -eq "1" ]; then
        updates+=("$fieldname = \$\$$value\$\$")
    else
        conditions+=("$fieldname = \$\$$value\$\$")
    fi
    fields+=("$fieldname")
    values+=("\$\$$value\$\$")
    shift
done

setlist=$(printf -v var "%s, " "${updates[@]}"; echo "${var%, }")
fieldlist=$(printf -v var "%s, " "${fields[@]}"; echo "${var%, }")
valuelist=$(printf -v var "%s, " "${values[@]}"; echo "${var%, }")
whereclause=$(echo -n "WHERE ("; printf -v var "%s) AND (" "${conditions[@]}"; echo "${var% AND (}")
[ "$whereclause" = "WHERE ()" ] && unset whereclause

if [ "$COMMAND" == "show" ]; then
    SQL="SELECT * FROM $DBTABLE $whereclause;"
elif [ "$COMMAND" == "new" ]; then
    SQL="INSERT INTO $DBTABLE ($fieldlist) VALUES ($valuelist);"
elif [ "$COMMAND" == "set" ]; then
    SQL="UPDATE $DBTABLE SET $setlist $whereclause"
elif [ "$COMMAND" == "del" ]; then
    SQL="DELETE FROM $DBTABLE $whereclause;"
else
    SQL="SELECT $DBTABLE.$COMMAND FROM $DBTABLE $whereclause;"
fi

psql -c "$SQL" "$DBNAME"
